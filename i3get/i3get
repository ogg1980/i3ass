#!/usr/bin/env bash

__name="i3get"
__version="0.303"
__author="budRich"
__contact='robstenklippa@gmail.com'
__created="2017-03-08"
__updated="2018-09-16"

main(){
  local option optarg kol lopt sopt o synk

  synk=0

  # default search for active window, return con_id
  __sret=n

  declare -A __crit
  declare -A options

  options[version]=v
  options[help]=h::
  options[class]=c:
  options[instance]=i:
  options[title]=t:
  options[conid]=n:
  options[winid]=d:
  options[ret]=r:
  options[mark]=m:
  options[titleformat]=o:
  options[active]=a
  options[sync]=y

  for o in "${!options[@]}"; do
    [[ ${options[$o]} =~ ([:]*)$ ]] \
      && kol="${BASH_REMATCH[1]:-}"
    lopt+="$o$kol,"
    sopt+="${options[$o]}"
  done

  eval set -- "$(getopt --name "$__name" \
    --options "$sopt" \
    --longoptions "$lopt" \
    -- "$@"
  )"

  while true; do
    [[ $1 = -- ]] && option="$1" || {
      option="${1##--}" 
      option="${option##-}"
      optarg="${2:-}" 
    }

    case "$option" in
      v | version ) printinfo version     ; exit ;;
      h | help    ) printinfo "${optarg}" ; exit ;;

      i|instance) 
        __crit[instance]="${optarg}" && shift
      ;;

      c|class) 
        __crit[class]="${optarg}" && shift
      ;;

      t|title) 
        __crit[title]="${optarg}" && shift
      ;;

      n|conid) 
        __crit[id]="${optarg}" && shift
      ;;

      d|winid) 
        __crit[window]="${optarg}" && shift
      ;;

      m|mark) 
        __crit[marks]="${optarg}" && shift
      ;;

      o|titleformat) 
        __crit[title_format]="${optarg}" && shift
      ;;

      a | active) __crit[focused]="true" ;;
      r | ret   ) __sret="${optarg}" && shift ;;
      y | sync  ) synk=1;;

      -- ) shift ; break ;;
      *  ) break ;;

    esac
    shift
  done


  # if no search is given, search for active window
  [[ ${#__crit[@]} -eq 0 ]] && __crit[focused]=true


  result="$(getwindow)"

  ((synk==1)) && {
    # timeout after 10 seconds
    for ((i=0;i<100;i++)); do 
      sleep 0.1
      result=$(getwindow)
      [ -n "$result" ] && break
    done
  }

  [ -n "$result" ] \
    && printf '%s\n' "${result}" \
    || ERX "no matching window."
}

getwindow(){
  {
    for c in "${!__crit[@]}"; do
      echo -n "$c:${__crit[$c]},"
    done

    echo -n "__START__,"

    i3-msg -t get_tree
  } | awk -v RS=',' -F':' -v sret="${__sret}" '
    BEGIN {hit=0;start=0;trg=0}

      # set crit array
      start==0 && $0 !~ "__START__" && /./ {
        crit[$1]=$2
        trg++
      }

      # reset return array
      $(NF-1) ~ /"id"$/ {
        if (hit == trg) exit
        cid=$NF
        hit=0
        for(k in r){if(k!="w"){r[k]=""}}
        if(sret ~ n)
          r["n"]=cid
        
      }

      start==1 && hit!=trg {
        for (c in crit) {
          if ($(NF-1) ~ "\"" c "\"" && $NF ~ crit[c]) {
            if (fid==cid) {hit++}
            else {hit=1;fid=cid}
          }
        }
      }


      sret ~ "t" && $1=="\"title\"" {sub($1":","");r["t"]=$0}
      sret ~ "c" && $(NF-1) ~ "\"class\"" {r["c"]=$NF}
      sret ~ "i" && $1=="\"instance\"" {r["i"]=$2}
      sret ~ "d" && $1=="\"window\"" {r["d"]=$2}
      sret ~ "m" && $1=="\"marks\"" {r["m"]=$2}
      sret ~ "a" && $1=="\"focused\"" {r["a"]=$2}
      sret ~ "o" && $1=="\"title_format\"" {r["o"]=$2}
      sret ~ "w" && $1=="\"num\"" {r["w"]=$2}
      sret ~ "f" && $1=="\"floating\"" {r["f"]=$2}
      
      /__START__/ {start=1}

    END{
      if (hit==0) exit
      split(sret, aret, "")
      for (i=1; i <= length(sret); i++) {
        op=r[aret[i]]
        gsub(/^["]|["]$/,"",op)
        if(op!="")
          printf("%s\n", op)
      }
    }
    '
}

printinfo(){
about=\
'`i3get` - Return information about i3wm.

SYNOPSIS
--------

`i3get` [`-h`|`-v`]  
`i3get` [`OPTION` [*CRITERIA*]] [`-r` [tcidnmwafov]] [`-y`]  

DESCRIPTION
-----------

Search for `CRITERIA` in the output of `i3-msg -t
get_tree`,  return desired information. If no
arguments are passed.  `con_id` of acitve window
is returned. If there is more then one criterion,
all of them must be true to get results.

OPTIONS
-------

`-v`|`--version`  
Show version and exit

`-h`|`--help`  
Show this help

`-a`|`--active`  
Currently active window (default)

`-c`|`--class` *CLASS*  
Search for windows with the given class

`-i`|`--instance` *INSTANCE*  
Search for windows with the given instance

`-t`|`--title` *TITLE*  
Search for windows with title.

`-n`|`--conid` *CON_ID*  
Search for windows with the given con_id

`-d`|`--winid` *CON_ID*  
Search for windows with the given window id

`-m`|`--mark` *CON_MARK*  
Search for windows with the given mark

`-o`|`--titleformat` *TTL_FRMT*  
Search for windows with the given titleformat

`-y`|`--sync`  
Synch on. If this option is included,  
script will wait till target window exist.

`-r`|`--ret` [*OUTPUT*]  
*OUTPUT* can be one or more of the following 
characters:   

`t`: title  
`c`: class  
`i`: instance  
`d`: Window ID  
`n`: Con_Id (default)  
`m`: mark  
`w`: workspace  
`a`: is active  
`f`: floating state  
`o`: title format  
`v`: visible state  

EXAMPLES
--------
search for window with instance name sublime_text. Request
workspace, title and floating state.  

``` shell
$ i3get -i sublime_text -r wtf 
1
"~/src/bash/i3ass/i3get (i3ass) - Sublime Text"
user_off
```

Title and tile_format output is always surrounded
with doublequotes.

DEPENDENCIES
------------

i3wm
'

bouthead="
${__name^^} 1 ${__created} Linux \"User Manuals\"
=======================================

NAME
----
"

boutfoot="
AUTHOR
------

${__author} <${__contact}>
<https://budrich.github.io>

SEE ALSO
--------

i3(1)
"

  case "$1" in
    # print version info to stdout
    version )
      printf '%s\n' \
        "$__name - version: $__version" \
        "updated: $__updated by $__author"
      exit
      ;;
    # print help in markdown format to stdout
    md ) printf '%s' "# ${about}" ;;

    # print help in markdown format to README.md
    mdg ) printf '%s' "# ${about}" > "${__dir}/README.md" ;;
    
    # print help in troff format to __dir/__name.1
    man ) 
      printf '%s' "${bouthead}" "${about}" "${boutfoot}" \
      | go-md2man > "${__dir}/${__name}.1"
    ;;

    # print help to stdout
    * ) 
      printf '%s' "${about}" | awk '
         BEGIN{ind=0}
         $0~/^```/{
           if(ind!="1"){ind="1"}
           else{ind="0"}
           print ""
         }
         $0!~/^```/{
           gsub("[`*]","",$0)
           if(ind=="1"){$0="   " $0}
           print $0
         }
       '
    ;;
  esac
}

ERR(){ >&2 echo "[WARNING]" "$*"; }
ERX(){ >&2 echo "[ERROR]" "$*" && exit 1 ; }

init(){
  set -o errexit
  set -o pipefail
  # set -o nounset
  # set -o xtrace

  __source="$(readlink -f "${BASH_SOURCE[0]}")"
  __dir="$(cd "$(dirname "${__source}")" && pwd)"
}

init
eval __lastarg="\${$#}"
main "${@}"
