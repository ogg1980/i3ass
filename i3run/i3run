#!/usr/bin/env bash

NAME="i3run"
VERSION="0.008"
AUTHOR="budRich"
CONTACT='robstenklippa@gmail.com'
CREATED="2017-04-20"
UPDATED="2018-07-04"

main(){

  I3FYRA_WS=${I3FYRA_WS:-X}

  I3RUN_BOTTOM_GAP=${i3RUN_BOTTOM_GAP:-10}
  I3RUN_TOP_GAP=${i3RUN_TOP_GAP:-10}
  I3RUN_LEFT_GAP=${i3RUN_LEFT_GAP:-10}
  I3RUN_RIGHT_GAP=${i3RUN_RIGHT_GAP:-10}

  summon=0

  while getopts :c:i:t:e:l:gsvhmx:n:t: option; do
    case "${option}" in
      i) acri=("-i" "${OPTARG}") ;;
      c) acri=("-c" "${OPTARG}") ;;
      t) acri=("-t" "${OPTARG}") ;;
      n) acri=("-n" "${OPTARG}") ;;
      e) command="${OPTARG}"     ;;
      g) donthide=1              ;;
      s) summon=1                ;;
      m) followmouse=1           ;;
      x) oldname="${OPTARG}"     ;;

      v) printf '%s\n' \
       "$NAME - version: $VERSION" \
       "updated: $UPDATED by $AUTHOR"
       exit ;;
      h|*) printinfo && exit ;;
    esac
  done

  declare -A i3list # globals array
  eval "$(i3list "${acri[@]}")"

  # if window doesn't exist, launch the command.
  [[ -z ${i3list[TWC]} ]] \
    && launchcommand \
    || focuswindow
}

launchcommand(){

  eval "${command}" > /dev/null 2>&1 & 

  [[ -n $oldname ]] && {

    [[ ${acri[0]} = '-c' ]] && xdtopt=("--class")
    [[ ${acri[0]} = '-i' ]] && xdtopt=("--classname")
    [[ ${acri[0]} = '-t' ]] && xdtopt=("--name")

    xdtopt+=("${acri[1]}")

    xdotool set_window ${xdtopt[@]} `i3get ${acri[0]} "$oldname" -r d -y`
  }

  i3list[TWC]=$(i3get -y "${acri[@]}")
  
  ((i3list[TWF] == 1)) && ((followmouse == 1)) && {
    eval "$(i3list "${acri[@]}")"
    sendtomouse
  }

  sleep .2
  i3-msg -q "[con_id=${i3list[TWC]}]" focus
  echo "${i3list[TWC]}"
}

focuswindow(){
  # if target window is active (current), 
  # send it to the scratchpad.
  # else focus target window.
  if [[ ${i3list[AWC]} = "${i3list[TWC]}" ]]; then
    if [[ $donthide != 1 ]]; then
      if [[ -z ${i3list[TWP]} ]]; then
        # keep floating state in a var
        i3var set "hidden${i3list[TWC]}" "${i3list[TWF]}"
        i3-msg -q "[con_id=${i3list[TWC]}]" move scratchpad
      else
        # if it is handled by i3fyra and active
        # hide the container
        i3fyra -z "${i3list[TWP]}"
      fi
    fi
  else
    hvar="$(i3var get "hidden${i3list[TWC]}")"
    if [[ -n $hvar ]]; then
      ((hvar == 1)) && fs=enable || fs=disable
      # clear the variable
      i3var set "hidden${i3list[TWC]}"
    else
      ((i3list[TWF] == 1)) && fs=enable || fs=disable
    fi
    # window is not handled by i3fyra and not active
    if [[ -z ${i3list[TWP]} ]]; then
      if [[ ${i3list[WSA]} != "${i3list[WST]}" ]]; then
        if [[ ${i3list[WST]} = "-1" ]] || [[ $summon = 1 ]]; then
          i3-msg -q "[con_id=${i3list[TWC]}]" \
            move to workspace "${i3list[WAN]}", \
            floating $fs
            i3-msg -q "[con_id=${i3list[TWC]}]" focus
            ((i3list[TWF] == 1)) && ((followmouse == 1)) \
              && sendtomouse
        else
          i3-msg -q workspace "${i3list[WTN]}"
        fi
        
      fi
    else
      # window is handled by i3fyra and not active
      if [[ ${i3list[WSA]} != "${i3list[WST]}" ]]; then
        # window is not on current ws
        if [[ ${i3list[WSF]} = ${i3list[WSA]} ]]; then
          # current ws is i3fyra WS
          [[ ${i3list[TWP]} =~ [${i3list[LHI]}] ]] \
            && i3fyra -s "${i3list[TWP]}"
        else
          # current ws is not i3fyra WS
          if [[ ${i3list[WST]} = "-1" ]] || [[ $summon = 1 ]]; then
            i3-msg -q "[con_id=${i3list[TWC]}]" \
              move to workspace "${i3list[WAN]}", floating $fs
              i3-msg -q "[con_id=${i3list[TWC]}]" focus
              ((i3list[TWF] == 1)) && ((followmouse == 1)) \
                && sendtomouse
          else
            i3-msg -q workspace "${i3list[WTN]}"
          fi
        fi
      fi
    fi
    i3-msg -q "[con_id=${i3list[TWC]}]" focus
  fi

  echo "${i3list[TWC]}"
}

sendtomouse(){
  local X Y SCREEN WINDOW newy newx tmpx tmpy

  local breaky=$(( i3list[WAH]-(I3RUN_BOTTOM_GAP+i3list[TWH]) ))
  local breakx=$(( i3list[WAW]-(I3RUN_RIGHT_GAP+i3list[TWW]) ))

  eval "$(xdotool getmouselocation --shell)"

  local tmpy=$((Y-(i3list[TWH]/2)))
  local tmpx=$((X-(i3list[TWW]/2)))
  

  ((Y>(${i3list[WAH]}/2))) \
    && newy=$((tmpy>breaky
            ? breaky
            : tmpy)) \
    || newy=$((tmpy<I3RUN_TOP_GAP
            ? I3RUN_TOP_GAP
            : tmpy))

  ((X<(${i3list[WAW]}/2))) \
    && newx=$((tmpx<I3RUN_LEFT_GAP 
            ? I3RUN_LEFT_GAP 
            : tmpx)) \
    || newx=$((tmpx>breakx
            ? breakx 
            : tmpx))

  ((i3list[TWF] == 1)) \
    && i3-msg "[con_id=${i3list[TWC]}]" move absolute position $newx $newy
}

printinfo(){
  case "$1" in
    m ) printf '%s' "${about}" ;;
    
    f ) 
      printf '%s' "${bouthead}"
      printf '%s' "${about}"
      printf '%s' "${boutfoot}"
    ;;

    ''|* ) 
      printf '%s' "${about}" | awk '
         BEGIN{ind=0}
         $0~/^```/{
           if(ind!="1"){ind="1"}
           else{ind="0"}
           print ""
         }
         $0!~/^```/{
           gsub("[`*]","",$0)
           if(ind=="1"){$0="   " $0}
           print $0
         }
       '
    ;;
  esac
}

bouthead="
${NAME^^} 1 ${UPDATED} Linux \"User Manuals\"
=======================================

NAME
----
"

boutfoot="
AUTHOR
------

${AUTHOR} <${CONTACT}>
<https://budrich.github.io>

SEE ALSO
--------

i3(1), i3list(1), i3get(1), i3var(1), i3fyra(1) xdotool(1)
"

about='
`i3run` - Run, Raise or hide windows in i3wm

SYNOPSIS
--------

`i3run` `-h`|`-v`  
`i3run` `-i`|`-c`|`-t` [*CRITERIA*] [`-g`] [`-m`] [`-s`] [`-x` *OLDNAME*] [`-e` *COMMAND*]

DESCRIPTION
-----------

`i3run` let'"'"' you use one command for multiple
functions related to the same window identified by a
given criteria, (*see options below*).  

`i3run` will take different action depending on
the state of the searched window:   

| **target window state**          | **action**
|:---------------------------------|:-----------------
| Active and not handled by i3fyra | hide
| Active and handled by i3fyra     | hide container, if not `-g` is set
| Handled by i3fyra and hidden     | show container, activate
| Not handled by i3fyra and hidden | show window, activate
| Not on current workspace         | goto workspace or show if `-s` is set
| Not found                        | execute command (`-e`)

Hidden in this context, means that window is on the scratchpad.
Show in this context means, move window to current workspace.

OPTIONS
-------

`-v`  
Show version info and exit 

`-h`  
Show this help and exit    

`-c` *CLASS*  
Search for windows with the given CLASS

`-i` *INSTANCE*  
Search for windows with the given INSTANCE

`-t` *TITLE*  
Search for windows with the given TITLE

`-e` *COMMAND*  
Command to run if no window is found.

`-s`   
Instead of switching workspace,
summon window to current workspace

`-g`    
Don'"'"'t hide window/container if it'"'"'s active.

`-m`  
The window will be placed on the location of the mouse
cursor when it is created or shown. (*needs `xdotool`*)

`-x` *OLDNAME*  
If the search criteria is `-i` (instance), the window with
instance: *OLDNAME* will get a n new instance name matching
the criteria when it is created (*needs `xdotool`*).

it is important that `-e` *COMMAND* is last of the options.
`-e` is optional, if no *COMMAND* is passed and no window is found, nothing happens.
It is also important that *COMMAND* will spawn a window matching the criteria,
otherwise the script will get stuck in a loop waiting for the window to appear.

ENVIRONMENT
-----------

`I3RUN_BOTTOM_GAP` *INT*  
Distance from the bottom edge of the screen to show floating windows.
Defaults to 10.

`I3RUN_TOP_GAP` *INT*  
Distance from the top edge of the screen to show floating windows.
Defaults to 10.

`I3RUN_LEFT_GAP` *INT*  
Distance from the left edge of the screen to show floating windows.
Defaults to 10.

`I3RUN_RIGHT_GAP` *INT*  
Distance from the right edge of the screen to show 
floating windows. Defaults to 10.

`I3FYRA_WS` *INT*  
Workspace to use for i3fyra. If not set, the first
workspace that request to create the layout will
be used.

DEPENDENCIES
------------

i3list  
i3get  
i3var  

OPTIONAL
--------  

xdotool  
i3fyra
'

if [ "$1" = "md" ]; then
  printinfo m
  exit
elif [ "$1" = "man" ]; then
  printinfo f
  exit
else
  main "${@}"
fi
